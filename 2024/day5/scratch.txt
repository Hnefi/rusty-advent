### SCRATCHPAD ###

Rule descriptions:
47|53
97|13
97|61
97|47
75|29
61|13
75|53
29|13
97|29
53|29
61|53
97|53
61|29
47|13
75|47
97|75
47|61
75|61
47|29
75|13
53|13

- Describes a specific ordering relation: 47 comes before 53, 97 comes before 13, 97 comes before 61, etc...
- If a pair in the update _matches_ the ordering relation, then the update is still acceptable.
- What we really care about is if an ordering relationship is VIOLATED, meaning X|Y but in the actual list, Y|X.

Given an update like this (allowed):
75,47,61,53,29

- Generate all pairs:
-> (75, 47), (75, 61), (75, 53), (75, 29)
-> (47, 61), (47, 53), (47, 29)
-> (61, 53), (61, 29)

When given an update like this (not allowed):
75,97,47,61,53
-> (75,97), (75,47), (75,61), (75,53)
-> (97,47), (97,61), (97,53)
-> (47,61), (47,53)
-> (61,53)

----------- Part 2 --------------
- What we have to do is re-order all the updates so that all of the rules are respected.
- Info that we need:
  - All of the pairs that violate order constraints - e.g., we have a rule X|Y but the actual list contains Y|X.
    - Maps to an obvious "list of swaps"? i.e., taking the list and swapping "Y|X" for "X|Y"
    - Will it always converge? i.e., we swapped X|Y but then created another problem Z|X?
      - Simple example:

        Rules:
        A|B
        B|C

        List:
        C B A

        Pairings: C|B, C|A, B|A
        Iterative swaps and new lists generated after all swaps are consumed.
          B C A
          A C B -> A|C, A|B, C|B
            ** This is an example of how we swapped B|A and then created a new violation, because "B" jumped over "C" in the process.
          A B C
    - Therefore, after every swap iteration, we have to re-parse the list to ensure we didn't create any other rule violations.


    
Test illegal outputs:
[[26, 11, 53, 72, 61, 92, 17, 77, 37], [96, 43, 78, 17, 63, 81, 54, 64, 72, 53, 35]
My code says:
[[92, 37, 26, 17, 61, 72, 77, 53, 11], [35, 17, 78, 72, 96, 64, 53, 63, 54, 81, 43]

- This seems to be correct, and I have added asserts that prove that every vector is totally ordered.
